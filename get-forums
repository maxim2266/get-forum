#!/usr/bin/env python3

from pathlib import Path
from html.parser import HTMLParser
from html import escape as html_escape
from re import sub as subst
from sys import argv, exit

class Forum:
	def __init__(self, parent):
		self.parent = parent
		self.title = ''
		self.fid = None
		self.children = []

tag_map = {
	'ul': 	lambda a: 'l' if len(a) == 0 else
					  'r' if a.get('class') == 'tree-root' else
					  None,
	'li': 	lambda a: 'i' if len(a) == 0 else
					  None,
	'span': lambda a: 's' if len(a) == 0 else
					  'b' if a.get('class') == 'b' else
					  't' if a.get('class') == 'c-title' else
					  None,
	'a': 	lambda a: 'a' if a.get('href') else
					  None
}

def map_tag(tag, attrs):
	try:
		return tag_map[tag](attrs)
	except KeyError:
		raise RuntimeError('Unexpected tag: ' + tag + ' ' + str(attrs))

class ForumListReader(HTMLParser):
	def __init__(self):
		super(ForumListReader, self).__init__()
		self.state = ''
		self.root = None
		self.forum = None

	def handle_starttag(self, tag, attrs):
		if not self.state and not self.root:
			if tag == 'div' and ('id', 'f-map') in attrs:
				self.state = '$'
				self.root = Forum(None)
				self.forum = self.root
		elif self.state:
			attrs = dict(attrs)
			t = map_tag(tag, attrs)

			# <ul class=tree-root>
			if t == 'r' and self.state == '$':
				pass	# just skip the tag
			# <li>
			elif t == 'i':
				if self.state == '$r' and self.forum.title:
					raise RuntimeError('Duplicate <li> tag in root list item')

				# new child forum
				self.forum.children.append(Forum(self.forum))
				self.forum = self.forum.children[-1]
			# <span class=b> or <span>
			elif t in ('b', 's') and self.state.endswith('i'):
				pass	# always skip 'span' after 'li'
			# <span class=c-title>
			elif t == 't' and self.state == '$rib':
				try:
					self.forum.title = attrs['title'].strip()
				except KeyError:
					raise RuntimeError('Missing "title" attribute of "c-title" tag')
			# <ul>
			elif t == 'l' and self.state.endswith('i'):
				if self.forum.children:
					raise RuntimeError('Duplicate <ul> tag')
			# <a href=forum-id>
			elif t == 'a' and (self.state.endswith('ib') or self.state.endswith('is')):
				self.forum.fid = int(attrs.get('href'))
			# otherwise, it's an error
			else:
				raise RuntimeError('Unexpected tag %s in state %s'.format(tag, self.state))

			self.state += t

	def handle_endtag(self, tag):
		if self.state:
			if self.state.endswith('i'):	# but not 'r'
				if not self.forum.title:
					raise RuntimeError('Untitled forum: ' + self.state)

				self.forum = self.forum.parent

			self.state = self.state[:-1]

	def handle_data(self, data):
		if self.state and self.state.endswith('a'):
			data = data.strip()

			if not data:
				raise RuntimeError('Missing item name')

			self.forum.title = subst('\s+', ' ', data)

# plain text output
def print_text_impl(forum, level):
	fid = str(forum.fid) + ': ' if forum.fid else ''
	print(('\t' * level) + fid + forum.title)

	for frm in forum.children:
		print_text_impl(frm, level + 1)

def print_text(forums):
	for f in forums:
		print_text_impl(f, 0)

# html output
def print_html_forums(forums):
	for f in forums:
		if f.fid:
			print('<li><a href="http://rutracker.org/forum/viewforum.php?f={0}">{1}</a>'
					.format(f.fid, html_escape(f.title)))
		else:
			print('<li><h3>{0}</h3>'.format(html_escape(f.title)))

		if f.children:
			print('<ul>')
			print_html_forums(f.children)
			print('</ul>')

		print('</li>')

def print_html(forums):
	print('''<!DOCTYPE HTML><html><head><meta charset="utf-8"/>
<title>Список форумов</title>
<style> ul { list-style-type: disc; } </style>
</head><body><ul>''')

	print_html_forums(forums)
	print('</ul></body></html>')

# output handler map
output_map = {
	'--text': print_text,
	'--html': print_html
}

# process command line parameters
if len(argv) > 3:
	exit('Invalid command line parameters.')

try:
	if argv[1].startswith('--'):
		try:
			output = output_map[argv[1]]
		except KeyError:
			exit('Invalid option: ' + argv[1])

		src = argv[2]
	else:
		output = print_text
		src = argv[1]
except IndexError:
	exit('Invalid command line parameters.')

# read forum tree
reader = ForumListReader()
reader.feed(Path(src).read_text(encoding = "windows-1251"))

# generate output
output(reader.root.children)

